
import 'dart:convert';
import 'package:http/http.dart';

import 'package:{{projectName}}/core/models/api_error_response.dart';
import 'package:{{projectName}}/core/models/api_exceptions.dart';
import 'package:{{projectName}}/helper/logger.dart';
import 'package:{{projectName}}/locator.dart';
import 'package:{{projectName}}/services/appconfig_service.dart';
import 'package:{{projectName}}/services/dialog_service.dart';
import 'package:{{projectName}}/services/api_endpoints.dart';
import 'package:{{projectName}}/services/preference_service.dart';

class ApiBase {

  var client = new Client();
  final AppConfigService _appConfigService = locator<AppConfigService>();
  final PreferenceService _preferenceService = locator<PreferenceService>();

  // SERIALIZE & ASYNC FUNCTION
  String serialize(Object obj) {
    String serialized = '';
    if (obj == null) {
      serialized = '';
    } else {
      serialized = json.encode(obj);
    }
    return serialized;
  }

   Future<Response> sendAsync(String method, String path, Object body, {bool authentication = false}) async {
    String baseUrl = _appConfigService.config.baseApiUrl;
    var url = Uri.parse(baseUrl + path);
    Logger.d("URL $baseUrl$path");
    var requestMessage =Request(method,url);
    Map<String, String> headerParams = {};
    try  {
      if (body != null) {
        if (body is String) {
          headerParams["Content-Type"] = "application/x-www-form-urlencoded";
          requestMessage.body = body;
        }
        else if (body is MultipartRequest) {
          headerParams['Accept'] = "application/json";
        }
        else {
          headerParams['Accept'] = "application/json";
          headerParams["Content-Type"] = "application/json";
          requestMessage.body = serialize(body);
        }
      }

//      headerParams["User-Agent"] =  await _deviceService.getUserAgent();
//      headerParams['OG-Device-Id'] =  await _deviceService.getDeviceId();
//      headerParams['OG-User'] = await _getUserInfo();

      if (authentication) {
        headerParams['Authorization'] = 'Bearer ' + _preferenceService.getBearerToken();
      }

//      if(path.contains("login")){
//        headerParams.addAll( await _deviceService.getDeviceInfoHeaders());
//      }

      requestMessage.headers.addAll(headerParams);
      Response response;
      try {

        if(body is MultipartRequest){
          body.headers.addAll(headerParams);
          response =  await Response.fromStream(await client.send(body));
        }
        else{
          response=  await Response.fromStream(await client.send(requestMessage));
        }
        Logger.d(requestMessage.toString());
        Logger.d(response.body.toString());
      }
      catch (e) {
        var error =  ApiException(_handleConnectionError());
        if ((error!=null && error.error!=null)) {
          if(error.error.getSingleMessage()!=null){
            locator<DialogService>().showDialog(description: error.error.getSingleMessage());
          }
        }
      }
      if(response!=null){
        if (response.statusCode == 200) {
          return response;
        }
        else if (response.statusCode >= 400) {
          var error = await _handleApiError(response, false);
          if (error!=null) {
            if(error.getSingleMessage()!=null){
              locator<DialogService>().showDialog(description: error.getSingleMessage());
            }
          }
        }
      }
      return null;
    }
    finally{

    }

  }

  Future<bool> logOut() async {
    var url = Uri.parse(_appConfigService.config.baseApiUrl + ApiEndpoint.logout);
    Logger.d("URL $url");
    var requestMessage =Request("POST",url);
    Map<String, String> headerParams = {};
    headerParams['Accept'] = "application/json";
    headerParams["Content-Type"] = "application/json";
    try  {
//      headerParams["User-Agent"] = await _deviceService.getUserAgent();
//      headerParams['OG-Device-Id'] = await _deviceService.getDeviceId();
      headerParams['Authorization'] = 'Bearer ' + _preferenceService.getBearerToken();
      requestMessage.headers.addAll(headerParams);
      try {
        await Response.fromStream(await client.send(requestMessage));
      }
      catch (e) {
        Logger.w(e);
      }
    }
    finally{

    }
    return true;

  }


//  Future<APIToken> doRefreshToken() async {
//
//    var refreshToken = await _tokenService.getRefreshToken();
//    var token = await _tokenService.getToken();
//    if(refreshToken.isEmpty)
//    {
//      throw new ApiException(new ErrorResponse());
//    }
//    var url = Uri.parse(_appConfigService.config.baseApiUrl + "account/refresh-token");
//    Logger.d("URL $url");
//    Map<String,dynamic> params = new Map();
//    params['auth_token'] = token;
//    params['refresh_token'] = refreshToken;
//
//    var requestMessage =Request("POST",url);
//    requestMessage.body = serialize(params);
//    Map<String, String> headerParams = {};
//    headerParams['Accept'] = "application/json";
//    headerParams["Content-Type"] = "application/json";
//
//    try  {
//      headerParams["User-Agent"] = await _deviceService.getUserAgent();
//      headerParams['OG-Device-Id'] = await _deviceService.getDeviceId();
//      headerParams['Authorization'] = 'Bearer ' + token;
//      requestMessage.headers.addAll(headerParams);
//      Response response;
//      try {
//        response=  await Response.fromStream(await client.send(requestMessage));
//      }
//      catch (e) {
//        var error =  ApiException(_handleConnectionError());
//        if (error!=null && error.error!=null) {
//          if(error.error.getSingleMessage()!=null){
//            locator<DialogService>().showDialog(description: error.error.getSingleMessage());
//          }
//        }
//      }
//      if (response.statusCode == 200) {
//        var tokenResponse = APIToken.fromJson(json.decode(response.body));
//        await _tokenService.setTokens(tokenResponse.authToken,tokenResponse.refreshToken);
//        return tokenResponse;
//      }
//      else {
//        var error = await _handleApiError(response, true);
//
//        if (error!=null) {
//          if(error.getSingleMessage()!=null){
//            locator<DialogService>().showDialog(description: error.getSingleMessage());
//          }
//
//        }
//      }
//    }
//    finally{
//
//    }
//    return null;
//
//  }

  ErrorResponse _handleConnectionError() {
    var result = new ErrorResponse();
    result.statusCode = 502;
    result.message = "There is a problem connecting to the server.";
    return result;
  }

  Future<ErrorResponse> _handleApiError(Response response, bool tokenError) async {
    //TokenError and BadRequest || Forbidden || UnAuthorized
    if ((tokenError && response.statusCode == 400) || response.statusCode == 403 || response.statusCode == 401){
      //handle logout here

      //TODO: Event Bus Service
//      locator<EventBusService>().eventBus.fire(new LoggedOutEvent(_user,"Please login again as we had issue with the request."));
      return null;
    }

    Map<String, Object> responseJObject;
    if (_isJsonResponse(response)) {
      responseJObject = json.decode(response.body);
    }
    return ErrorResponse.fromResponse(responseJObject, response.statusCode, tokenError);
  }

  bool _isJsonResponse(Response response) {
    return (response.headers["content-type"]?.contains("json"));
  }


}